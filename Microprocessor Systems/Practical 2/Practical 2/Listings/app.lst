


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   11 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   12 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   13 00000000         ; number
   14 00000000         
   15 00000000 E59FC1F4        ldr              r12, =0x419
   16 00000004 E28CC001        add              r12, r12, #1
   17 00000008 E3A0B102        ldr              r11, =0x80000000
   18 0000000C E3A09000        ldr              r9, =0x0
   19 00000010 E3A05000        ldr              r5, =0x0
   20 00000014         
   21 00000014         ; setup registers to hold memory addresses.
   22 00000014         
   23 00000014 E15C000B        cmp              r12, r11
   24 00000018 3A000002        blo              positiveNumber
   25 0000001C E3A05001        ldr              r5, =0x1
   26 00000020 E1E0C00C        mvn              r12, r12
   27 00000024 E28CC001        add              r12, r12, #1
   28 00000028         positiveNumber
   29 00000028 E59F61D0        ldr              r6, =0x40000100 ; register that
                                                             stores memory ofth
                                                            e didgets to presen
                                                            t
   30 0000002C E59F71D0        ldr              r7, =0x40000200 ; register that
                                                             stores the subtrac
                                                            tors
   31 00000030 EA000004        b                assignSubtractors ; call subrou
                                                            tine that sorts out
                                                             the subtractors
   32 00000034         leaveLoop1
   33 00000034 EA00000C        b                findDidgets ; call subroutine t
                                                            hat sorts out the d
                                                            idgets
   34 00000038 E2899001        add              r9, r9, #1
   35 0000003C E3A0900E        ldr              r9, =0xe    ;
   36 00000040 E5869000        str              r9, [r6]    ; r6 stores the las
                                                            t + 1 memory addres
                                                            s used
   37 00000044         leaveLoop2
   38 00000044 EA00002B        b                jumpATad
   39 00000048         
   40 00000048         ; store all the subtrators in memory.
   41 00000048         
   42 00000048         assignSubtractors
   43 00000048 E3A08001        ldr              r8, =0x1    ; first subtractor
   44 0000004C E3A0900A        ldr              r9, =0xA    ; what to multiply 



ARM Macro Assembler    Page 2 


                                                            each new subtractor
                                                             by
   45 00000050 E59FA1B0        ldr              r10, =0x40000224 ; store max me
                                                            mory value you will
                                                             meet
   46 00000054         whileLoop1
   47 00000054 E157000A        cmp              r7, r10     ; see if less than 
                                                            max value
   48 00000058 CAFFFFF5        bgt              leaveLoop1  ; if not, leave loo
                                                            p
   49 0000005C E5878000        str              r8, [r7]    ; store value in me
                                                            mory
   50 00000060 E2877004        add              r7, r7, #4  ; incriment memory 
                                                            spot to next word
   51 00000064 E0080899        mul              r8, r9, r8  ; get next subtract
                                                            or
   52 00000068 EAFFFFF9        b                whileLoop1  ; goback to start o
                                                            f the loop
   53 0000006C         
   54 0000006C         ; find all the digets 
   55 0000006C         
   56 0000006C         findDidgets
   57 0000006C E59F8194        ldr              r8, =0x40000224 ; load memory a
                                                            ddress 
   58 00000070 E3550000        cmp              r5, #0      ; check if number i
                                                            s negative
   59 00000074 0A000002        beq              isPositive  ; if not, skip next
                                                             step
   60 00000078 E3A0900E        ldr              r9, =0xe    ; load F in memory 
                                                            address
   61 0000007C E5869000        str              r9, [r6]    ; store F in memory
                                                             value to represent
                                                             -
   62 00000080 E2866004        add              r6, r6, #4  ; incriment memory 
                                                            address
   63 00000084         isPositive
   64 00000084 E3A03000        ldr              r3, =0x0    ; counter for how m
                                                            any times the while
                                                             loop should loop( 
                                                            10 times )
   65 00000088 E3A0200A        ldr              r2, =0xA    ; how many times it
                                                             should loop
   66 0000008C E3A04000        ldr              r4, =0x0    ; register meerly h
                                                            olds 0
   67 00000090 E3A09000        mov              r9, #0      ; counter
   68 00000094 E3A0A000        mov              r10, #0     ; boolean, started 
                                                            recording digets
   69 00000098         whileLoop2
   70 00000098 E1530002        cmp              r3, r2      ; see if it is stil
                                                            l in the memory ran
                                                            ge
   71 0000009C AAFFFFE8        bge              leaveLoop2  ; leave the loop
   72 000000A0 E2833001        add              r3, r3, #1  ; incriement couter
                                                            
   73 000000A4 E5981000        ldr              r1, [r8]    ; load the subtract
                                                            or
   74 000000A8         whileLoop3
   75 000000A8 E15C0001        cmp              r12, r1     ; check if the numb
                                                            er is less than the



ARM Macro Assembler    Page 3 


                                                             subtracter
   76 000000AC DA000002        ble              leaveLoop3  ; leave the loop  i
                                                            f so
   77 000000B0 E04CC001        sub              r12, r12, r1 ; subtract the sub
                                                            tracter from the nu
                                                            mber
   78 000000B4 E2899001        add              r9, r9, #1  ; add 1 to the coun
                                                            ter
   79 000000B8 EAFFFFFA        b                whileLoop3
   80 000000BC         leaveLoop3
   81 000000BC E2488004        sub              r8, r8, #4  ; getthe new subtra
                                                            ter memory address
   82 000000C0 E3590000        cmp              r9, #0      ; see if the counte
                                                            r is equal to 0
   83 000000C4 1A000006        bne              jump1       ; if not equal jump
                                                             to a further bit o
                                                            f code
   84 000000C8 E35A0000        cmp              r10, #0     ; check if a diget 
                                                            has been stored pre
                                                            viusly
   85 000000CC 0AFFFFF1        beq              whileLoop2  ; jump back to the 
                                                            start of the while 
                                                            loop
   86 000000D0 E3A0900F        ldr              r9, =0xf
   87 000000D4 E5869000        str              r9, [r6]    ; store the counter
                                                             in the memory addr
                                                            ess
   88 000000D8 E3A09000        ldr              r9, =0x0
   89 000000DC E2866004        add              r6, r6, #4  ; incriment the add
                                                            ress for the next w
                                                            ord
   90 000000E0 EAFFFFEC        b                whileLoop2  ; jump back to the 
                                                            start of the while 
                                                            loop
   91 000000E4         jump1
   92 000000E4 E3A0A001        mov              r10, #1     ; sigmifies all sub
                                                            sequent "0"s are st
                                                            ored
   93 000000E8 E5869000        str              r9, [r6]    ; store the counter
                                                            in the memory addre
                                                            ss
   94 000000EC E2866004        add              r6, r6, #4  ; increment address
                                                             to the next word
   95 000000F0 E3A09000        mov              r9, #0      ; reset counter
   96 000000F4 EAFFFFE7        b                whileLoop2  ; jump back to the 
                                                            start of the while 
                                                            loop
   97 000000F8         
   98 000000F8         
   99 000000F8         
  100 000000F8         jumpATad
  101 000000F8         ; STEP 2
  102 000000F8         
  103 000000F8 E59F110C        ldr              r1,=IO1DIR
  104 000000FC E3A0280F        ldr              r2,=0x000f0000 ; select P1.19--
                                                            P1.16
  105 00000100 E5812000        str              r2,[r1]     ; make them outputs
                                                            
  106 00000104 E59F1104        ldr              r1,=IO1SET



ARM Macro Assembler    Page 4 


  107 00000108 E5812000        str              r2,[r1]     ; set them to turn 
                                                            the LEDs off
  108 0000010C E59F2100        ldr              r2,=IO1CLR
  109 00000110         ; r1 points to the SET register
  110 00000110         ; r2 points to the CLEAR register
  111 00000110         
  112 00000110         wloop
  113 00000110 E59F50E8        ldr              r5, =0x40000100 ; value to star
                                                            t checking at
  114 00000114         floop
  115 00000114 E5953000        ldr              r3, [r5]    ; load the number t
                                                            hats in the memory 
                                                            address
  116 00000118 EA000008        b                findCode    ; get the digets to
                                                             send to IO1CLR
  117 0000011C         returnCode
  118 0000011C E5827000        str              r7,[r2]     ; clear the bit -> 
                                                            turn on the LED
  119 00000120         
  120 00000120         ;delay for about a half second
  121 00000120 E59F40F0        ldr              r4,=30000000
  122 00000124         dloop
  123 00000124 E2544001        subs             r4,r4,#1
  124 00000128 1AFFFFFD        bne              dloop
  125 0000012C         
  126 0000012C E5817000        str              r7,[r1]     ; set the bit -> tu
                                                            rn off the LED
  127 00000130 E2855004        add              r5, r5, #4  ; incriment to next
                                                             memory address
  128 00000134 E1550006        cmp              r5, r6      ; check if it is gr
                                                            eater than the max 
                                                            address
  129 00000138 CAFFFFF4        bgt              wloop       ; if so reset memor
                                                            y address
  130 0000013C EAFFFFF4        b                floop       ; else just reset l
                                                            oop
  131 00000140         
  132 00000140         
  133 00000140         
  134 00000140         
  135 00000140         ; get code for LEDs
  136 00000140         
  137 00000140         findCode
  138 00000140 E353000F        cmp              r3, #15     ;
  139 00000144 1A000001        bne              notZero     ;
  140 00000148 E3A0780F        ldr              r7, =0x000f0000 ;
  141 0000014C EAFFFFF2        b                returnCode
  142 00000150         notZero
  143 00000150 E3530001        cmp              r3, #1      ;
  144 00000154 1A000001        bne              notOne      ;
  145 00000158 E3A07702        ldr              r7, =0x00080000 ;
  146 0000015C EAFFFFEE        b                returnCode
  147 00000160         notOne
  148 00000160 E3530002        cmp              r3, #2      ;
  149 00000164 1A000001        bne              notTwo      ;
  150 00000168 E3A07701        ldr              r7, =0x00040000 ;
  151 0000016C EAFFFFEA        b                returnCode
  152 00000170         notTwo
  153 00000170 E3530003        cmp              r3, #3      ;



ARM Macro Assembler    Page 5 


  154 00000174 1A000001        bne              notThree    ;
  155 00000178 E3A07703        ldr              r7, =0x000c0000 ;
  156 0000017C EAFFFFE6        b                returnCode
  157 00000180         notThree
  158 00000180 E3530004        cmp              r3, #4      ;
  159 00000184 1A000001        bne              notFour     ;
  160 00000188 E3A07802        ldr              r7, =0x00020000 ;
  161 0000018C EAFFFFE2        b                returnCode
  162 00000190         notFour
  163 00000190 E3530005        cmp              r3, #5      ;
  164 00000194 1A000001        bne              notFive     ;
  165 00000198 E3A0780A        ldr              r7, =0x000a0000 ;
  166 0000019C EAFFFFDE        b                returnCode
  167 000001A0         notFive
  168 000001A0 E3530006        cmp              r3, #6      ;
  169 000001A4 1A000001        bne              notSix      ;
  170 000001A8 E3A07806        ldr              r7, =0x00060000 ;
  171 000001AC EAFFFFDA        b                returnCode
  172 000001B0         notSix
  173 000001B0 E3530007        cmp              r3, #7      ;
  174 000001B4 1A000001        bne              notSeven    ;
  175 000001B8 E3A0780E        ldr              r7, =0x000e0000 ;
  176 000001BC EAFFFFD6        b                returnCode
  177 000001C0         notSeven
  178 000001C0 E3530008        cmp              r3, #8      ;
  179 000001C4 1A000001        bne              notEight    ;
  180 000001C8 E3A07801        ldr              r7, =0x00010000 ;
  181 000001CC EAFFFFD2        b                returnCode
  182 000001D0         notEight
  183 000001D0 E3530009        cmp              r3, #9      ;
  184 000001D4 1A000001        bne              notNine     ;
  185 000001D8 E3A07809        ldr              r7, =0x00090000 ;
  186 000001DC EAFFFFCE        b                returnCode
  187 000001E0         notNine
  188 000001E0 E353000E        cmp              r3, 0xe
  189 000001E4 1A000001        bne              notNegative
  190 000001E8 E3A0780D        ldr              r7, =0x000d0000 ;
  191 000001EC EAFFFFCA        b                returnCode  ;
  192 000001F0         notNegative                          ;
  193 000001F0 E3A07000        ldr              r7, =0x0    ;
  194 000001F4 EAFFFFC8        b                returnCode  ;
  195 000001F8         
  196 000001F8 EAFFFFFE 
                       stop    B                stop
  197 000001FC         
  198 000001FC                 END
              00000419 
              40000100 
              40000200 
              40000224 
              E0028018 
              E0028014 
              E002801C 
              01C9C380 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
assignSubtractors 00000048

Symbol: assignSubtractors
   Definitions
      At line 42 in file App.s
   Uses
      At line 31 in file App.s
Comment: assignSubtractors used once
dloop 00000124

Symbol: dloop
   Definitions
      At line 122 in file App.s
   Uses
      At line 124 in file App.s
Comment: dloop used once
findCode 00000140

Symbol: findCode
   Definitions
      At line 137 in file App.s
   Uses
      At line 116 in file App.s
Comment: findCode used once
findDidgets 0000006C

Symbol: findDidgets
   Definitions
      At line 56 in file App.s
   Uses
      At line 33 in file App.s
Comment: findDidgets used once
floop 00000114

Symbol: floop
   Definitions
      At line 114 in file App.s
   Uses
      At line 130 in file App.s
Comment: floop used once
isPositive 00000084

Symbol: isPositive
   Definitions
      At line 63 in file App.s
   Uses
      At line 59 in file App.s
Comment: isPositive used once
jump1 000000E4

Symbol: jump1



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 91 in file App.s
   Uses
      At line 83 in file App.s
Comment: jump1 used once
jumpATad 000000F8

Symbol: jumpATad
   Definitions
      At line 100 in file App.s
   Uses
      At line 38 in file App.s
Comment: jumpATad used once
leaveLoop1 00000034

Symbol: leaveLoop1
   Definitions
      At line 32 in file App.s
   Uses
      At line 48 in file App.s
Comment: leaveLoop1 used once
leaveLoop2 00000044

Symbol: leaveLoop2
   Definitions
      At line 37 in file App.s
   Uses
      At line 71 in file App.s
Comment: leaveLoop2 used once
leaveLoop3 000000BC

Symbol: leaveLoop3
   Definitions
      At line 80 in file App.s
   Uses
      At line 76 in file App.s
Comment: leaveLoop3 used once
notEight 000001D0

Symbol: notEight
   Definitions
      At line 182 in file App.s
   Uses
      At line 179 in file App.s
Comment: notEight used once
notFive 000001A0

Symbol: notFive
   Definitions
      At line 167 in file App.s
   Uses
      At line 164 in file App.s
Comment: notFive used once
notFour 00000190

Symbol: notFour
   Definitions
      At line 162 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 159 in file App.s
Comment: notFour used once
notNegative 000001F0

Symbol: notNegative
   Definitions
      At line 192 in file App.s
   Uses
      At line 189 in file App.s
Comment: notNegative used once
notNine 000001E0

Symbol: notNine
   Definitions
      At line 187 in file App.s
   Uses
      At line 184 in file App.s
Comment: notNine used once
notOne 00000160

Symbol: notOne
   Definitions
      At line 147 in file App.s
   Uses
      At line 144 in file App.s
Comment: notOne used once
notSeven 000001C0

Symbol: notSeven
   Definitions
      At line 177 in file App.s
   Uses
      At line 174 in file App.s
Comment: notSeven used once
notSix 000001B0

Symbol: notSix
   Definitions
      At line 172 in file App.s
   Uses
      At line 169 in file App.s
Comment: notSix used once
notThree 00000180

Symbol: notThree
   Definitions
      At line 157 in file App.s
   Uses
      At line 154 in file App.s
Comment: notThree used once
notTwo 00000170

Symbol: notTwo
   Definitions
      At line 152 in file App.s
   Uses
      At line 149 in file App.s
Comment: notTwo used once
notZero 00000150



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: notZero
   Definitions
      At line 142 in file App.s
   Uses
      At line 139 in file App.s
Comment: notZero used once
positiveNumber 00000028

Symbol: positiveNumber
   Definitions
      At line 28 in file App.s
   Uses
      At line 24 in file App.s
Comment: positiveNumber used once
returnCode 0000011C

Symbol: returnCode
   Definitions
      At line 117 in file App.s
   Uses
      At line 141 in file App.s
      At line 146 in file App.s
      At line 151 in file App.s
      At line 156 in file App.s
      At line 161 in file App.s
      At line 166 in file App.s
      At line 171 in file App.s
      At line 176 in file App.s
      At line 181 in file App.s
      At line 186 in file App.s
      At line 191 in file App.s
      At line 194 in file App.s

start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 000001F8

Symbol: stop
   Definitions
      At line 196 in file App.s
   Uses
      At line 196 in file App.s
Comment: stop used once
whileLoop1 00000054

Symbol: whileLoop1
   Definitions
      At line 46 in file App.s
   Uses
      At line 52 in file App.s
Comment: whileLoop1 used once
whileLoop2 00000098



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: whileLoop2
   Definitions
      At line 69 in file App.s
   Uses
      At line 85 in file App.s
      At line 90 in file App.s
      At line 96 in file App.s

whileLoop3 000000A8

Symbol: whileLoop3
   Definitions
      At line 74 in file App.s
   Uses
      At line 79 in file App.s
Comment: whileLoop3 used once
wloop 00000110

Symbol: wloop
   Definitions
      At line 112 in file App.s
   Uses
      At line 129 in file App.s
Comment: wloop used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 12 in file App.s
   Uses
      At line 108 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 10 in file App.s
   Uses
      At line 103 in file App.s
Comment: IO1DIR used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 11 in file App.s
   Uses
      At line 106 in file App.s
Comment: IO1SET used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
370 symbols in table
